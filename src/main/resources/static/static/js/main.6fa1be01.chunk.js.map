{"version":3,"sources":["logo.svg","components/Client/ClientItem.js","components/Client/CreateClientButton.js","components/Dashboard.js","actions/clientActions.js","actions/types.js","components/Layouts/Header.js","components/Client/AddClient.js","reducers/clientReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ClientItem","client","this","props","className","clientIdentifier","firstName","phone","href","Component","CreateClientButton","Fragment","to","Dashboard","getClients","clients","map","key","id","connect","state","dispatch","a","axios","get","res","type","payload","data","Header","data-toggle","data-target","AddClient","lastName","userName","password","errors","onChange","bind","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newClient","createClient","history","classnames","placeholder","post","push","response","initialState","combineReducers","action","middleware","thunk","store","window","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6fa1be01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\n class ClientItem extends Component {\r\n    render() {\r\n        const { client } = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"card card-body bg-light mb-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <span className=\"mx-auto\">{client.clientIdentifier}</span>\r\n                    </div>\r\n                    <div className=\"col-lg-6 col-md-4 col-8\">\r\n                        <h3>{client.firstName}</h3>\r\n                        <p>{client.phone}</p>\r\n                    </div>\r\n                    <div className=\"col-md-4 d-none d-lg-block\">\r\n                        <ul className=\"list-group\">\r\n                            <a href=\"#\">\r\n                                <li className=\"list-group-item board\">\r\n                                    <i className=\"fa fa-flag-checkered pr-1\">Client Board </i>\r\n                                </li>\r\n                            </a>\r\n                            <a href=\"#\">\r\n                                <li className=\"list-group-item update\">\r\n                                    <i className=\"fa fa-edit pr-1\">Update Client Info</i>\r\n                                </li>\r\n                            </a>\r\n                            <a href=\"\">\r\n                                <li className=\"list-group-item delete\">\r\n                                    <i className=\"fa fa-minus-circle pr-1\">Delete Client</i>\r\n                                </li>\r\n                            </a>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default ClientItem;","import React from 'react'\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nconst CreateClientButton = () => {\r\n    return(\r\n     <React.Fragment>\r\n\r\n        \r\n         <Link to=\"/addClient\"  className=\"btn btn-lg btn-info\">\r\n        Create a Client\r\n          </Link>\r\n    </React.Fragment>\r\n    );\r\n};\r\nexport default CreateClientButton;","import React, { Component } from 'react'\r\nimport ClientItem from './Client/ClientItem';\r\nimport CreateClientButton from './Client/CreateClientButton';\r\nimport { connect } from \"react-redux\";\r\nimport { getClients } from \"../actions/clientActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass Dashboard extends Component {\r\n\r\n\r\n    //lifecylce hook \r\n    componentDidMount(){\r\n        this.props.getClients();\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n       const {clients} = this.props.client;\r\n        return (\r\n            <div className=\"projects\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <h1 className=\"display-4 text-center\">Clients</h1>\r\n                        <br />\r\n                        <CreateClientButton />\r\n                        \r\n                        <br />\r\n                        <hr />\r\n                        {clients.map(client => (\r\n                            <ClientItem key={client.id} client={client} />\r\n                        )) }\r\n                      \r\n    \r\n                      \r\n                       \r\n                      \r\n    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n        );\r\n    }\r\n}\r\n\r\n\r\nDashboard.propTypes = {\r\n    client:PropTypes.object.isRequired,\r\n    getClients: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    client:state.client\r\n\r\n});\r\nexport default connect(mapStateToProps, { getClients })(Dashboard);","import axios from \"axios\";\r\nimport { GET_ERRORS, GET_CLIENTS } from \"./types\";\r\n\r\n\r\nexport const createClient = (client, history) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(\"http://localhost:8080/api/client\", client)\r\n        history.push(\"/dashboard\")\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: error.response.data\r\n        });\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const getClients = () => async dispatch => {\r\n    const res = await axios.get(\"http://localhost:8080/api/client/all\")\r\n    dispatch({\r\n        type: GET_CLIENTS,\r\n        payload: res.data\r\n    });\r\n};","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const GET_CLIENTS = \"GET_CLIENTS\";\r\n\r\n","import React, { Component } from 'react'\r\n\r\n class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <nav className=\"navbar navbar-expand-sm navbar navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand\" href=\"Dashboard.html\">\r\n                       Car Service Garage\r\n                    </a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                        <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n        \r\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"/dashboard\">\r\n                                    Clients\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n        \r\n                        <ul className=\"navbar-nav ml-auto\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link \" href=\"register.html\">\r\n                                    Sign Up\r\n                                </a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"login.html\">\r\n                                    Login\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from \"react-redux\";\r\nimport {createClient} from \"../../actions/clientActions\";\r\nimport classnames from \"classnames\";\r\nimport Feedback from 'react-bootstrap/esm/Feedback';\r\n\r\n class AddClient extends Component {\r\n     constructor(){\r\n         super();\r\n\r\n         this.state={\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            userName: \"\",\r\n            password: \"\",\r\n            phone: \"\",\r\n            clientIdentifier: \"\",\r\n            errors:{}\r\n         };\r\n         this.onChange = this.onChange.bind(this);\r\n         this.onSubmit = this.onSubmit.bind(this);\r\n\r\n     }\r\n\r\n     componentWillReceiveProps(nextProps){\r\n         if(nextProps.errors){\r\n             this.setState({ errors:nextProps.errors })\r\n         }\r\n\r\n     }\r\n\r\n\r\n\r\n\r\n     onChange(e){\r\n        this.setState({[e.target.name]:e.target.value })\r\n     }\r\n\r\n     onSubmit(e){\r\n         e.preventDefault();\r\n         const newClient ={\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            userName: this.state.userName,\r\n            password: this.state.password,\r\n            phone: this.state.phone,\r\n            clientIdentifier: this.state.clientIdentifier\r\n\r\n         };\r\n\r\n         this.props.createClient(newClient, this.props.history)\r\n     }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const {errors} = this.state  //extract errors on the text boxes\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n          \r\n\r\n\r\n            <div className=\"project\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <h5 className=\"display-4 text-center\">Create  Client form</h5>\r\n                        <hr />\r\n                        <form onSubmit={this.onSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg \",{\r\n                                    \"is-invalid\":errors.firstName\r\n                                }) } placeholder=\"Client First Name\" name=\"firstName\" value={this.state.firstName}\r\n                                onChange={this.onChange}/>\r\n                              {errors.firstName && (\r\n                                  <div className=\"invalid-feedback\">{errors.firstName}</div>\r\n                              )}\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                            <input type=\"text\" className=\"form-control form-control-lg \" placeholder=\"Client Last Name\" name=\"lastName\" value={this.state.lastName}  onChange={this.onChange}/>\r\n                            <p>{errors.lastName}</p>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Unique Client ID\" name=\"clientIdentifier\" value={this.state.clientIdentifier}\r\n                                onChange={this.onChange}\r\n                                \r\n                                    />\r\n                                    <p>{errors.clientIdentifier}</p>\r\n                                    \r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                            <input type=\"text\" className=\"form-control form-control-lg \" placeholder=\"Phone Number\" name=\"phone\" value={this.state.phone}  onChange={this.onChange}/>\r\n                            <p>{errors.phone}</p>\r\n                        </div>\r\n                          \r\n                        \r\n                            <h6>User Name</h6>\r\n                            <div className=\"form-group\">\r\n                            <input type=\"text\" className=\"form-control form-control-lg \" placeholder=\"UserName\" name=\"userName\" value={this.state.userName}  onChange={this.onChange}/>\r\n                            <p>{errors.userName}</p>\r\n                            </div>\r\n                            <h6>Password</h6>\r\n                            <div className=\"form-group\">\r\n                            <input type=\"password\" className=\"form-control form-control-lg \" placeholder=\"Password\" name=\"password\" value={this.state.password}  onChange={this.onChange}/>\r\n                            <p>{errors.password}</p>\r\n                           \r\n                            </div>\r\n    \r\n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddClient.propTypes = {\r\n    createClient : PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state =>({\r\n    errors: state.errors \r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n     { createClient }\r\n     )(AddClient);\r\n","import { GET_CLIENTS } from \"../actions/types\";\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    clients: [],\r\n    client: {}\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case GET_CLIENTS:\r\n        return{\r\n            ...state,\r\n            clients: action.payload\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_ERRORS} from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state=initialState, action){\r\n    switch(action.type){\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport clientReducer from \"./clientReducer\";\r\n\r\nimport  errorReducer  from \"./errorReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n    errors:errorReducer,\r\n    client: clientReducer\r\n});","import {createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n\r\nlet store; \r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\")) {\r\n    store = createStore(rootReducer, initialState,compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n);\r\n} else {\r\n    store = createStore(rootReducer, initialState,compose(applyMiddleware(...middleware))\r\n);\r\n}\r\n\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Layouts/Header';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport AddClient from './components/Client/AddClient';\nimport ClientItem from './components/Client/ClientItem';\nimport { render } from '@testing-library/react';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\n\nclass App extends Component {\n  render() {\n  return (\n    <Provider store={store}>\n    <Router>\n    <div className=\"App\">\n       <Header />\n  \n      <Route exact path=\"/dashboard\" component={Dashboard} />\n\n      <Route exact path=\"/addClient\" component={AddClient} />\n    \n    </div>\n    </Router>\n    </Provider>\n   );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}